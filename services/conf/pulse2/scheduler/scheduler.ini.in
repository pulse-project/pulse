[scheduler]
# This scheduler name
id = scheduler_01

## MANAGING ##
scheduler_path = @sbindir@/pulse2-scheduler
scheduler_proxy_path = @sbindir@/pulse2-scheduler-proxy
# UNIX socket to communicate between scheduler and scheduler-proxy
# scheduler_proxy_socket_path = /var/run/pulse2/scheduler-proxy.sock
# temp file to backup the unprocessed responses on scheduler-proxy
# scheduler_proxy_buffer_tmp = /tmp/pulse2-scheduler-proxy.buff.tmp

## NETWORK ##
# port = 8000
# host = 127.0.0.1
# username = username
# password = password
# enablessl = True
# If verifypeer is set, the scheduler will also connect to all the launchers
# using the following certificates.
# verifypeer = False
# cacert = /etc/mmc/pulse2/scheduler/keys/cacert.pem
# localcert = /etc/mmc/pulse2/scheduler/keys/privkey.pem

## SCHEDULING ##
# delay between requests during command launching - this lag avoids a huge load
# on the reqested side, i.e. on a launcher
# emitting_period = .1
# proxy buffer emitting period
# proxy_buffer_period = .1
#
# initial wait time, in seconds, to make stuff stabilize
# initial_wait = 2
#
# attempt to start (and stop) commands every n seconds
# awake_time = 5
# cache settings: requests to package managers are cached
# cache_size = 300
# cache_timeout = 500
#
# default database encoding (used to inject log files)
# dbencoding = utf-8
#
# scheduler mode, see doc !
# mode = async
#
# multithreading application
# max_threads = 20
#
# number of overtimed circuits in one batch
# max_to_overtimed = 1000
#
# In some cases, some steps failure are non-fatal for the final state of the command.
# Example: inventory fail but if other steps are ok, we want a success result for
# this command.
# Possible values are (separated by spaces): delete inventory reboot halt
# non_fatal_steps =

## Commands life ##
# Command max default authorized time (for each stage)
# max_command_time = 3600
#
# Command max upload time (aka 'upload' stage), override the previous one for looooong uploads
# max_upload_time = 21600
#
# Command max WOL wait-for-completion time: wait this ammount of second before going futher
# max_wol_time = 300

## NETWORKING ##
# prefered method to reach a client
# available:
# - fqdn: query name resolver system (/etc/hosts, dns...) with getent using the fqdn
# - shortname: query name resolver system (/etc/hosts, dns...) with getent using the shortname (domain stripped)
# - netbios: attempt a netbios lookup on shortname (domain stripped)
# - ip: extract addresses from target's inventory and choose the right one according to preferred_network
# tests are performed using ping
# resolv_order = ip fqdn shortname netbios first
#
# Preferred network parameter overrides default IP/netmask of server detected when scheduler is started.
# Setting this parameter favorize the list of introduced networks prior to others networks availables.
# Format of parameter: ip_address/netmask (e.g. preferred_network = 192.168.1.1/255.255.255.0 10.0.0.0/255.255.0.0)
# preferred_network =
# nmblookup command path
# netbios_path = /usr/bin/nmblookup

## CHECKING ##
# in some situations itn may be useful to do some pre-checks on clients
# checks can be done against every information recorded into the "target" table
# the following informations are available:
# target_name => contain the target Hostname
# target_uuid => contain the target UUID
# target_ipaddr => contain the target IP addresses, only the first one is used
# target_macaddr => contain the target MAC adresses, only the first one is used
# The two following options are formated as follow:
# *_check = <data-to-ask>=<expected-value>,...
# for exemple:
# server_check = IP=ipaddr
# client_check = UUID=uuid,HOSTNAME=name
# => will ask to client if its UUID is 'target_uuid', HOSTNAME is 'target_name',
# and tell it to give us it's IP and check the IP's value is 'target_ipaddr'
# While checking things, we may also want to announce what we are currently try to
# do on client, for each stage, for example TRANFERT while transfering something:
# announce_check = transfert=TRANFERT (comma-separated list as for previous options)
# currently available keywords: transfert, execute, delete, inventory
# announce_check =
# server_check =
# client_check =

# All workstations sends the heartbeat packets to Connection Manager
# and updates last contact timestamp into the table "taget".
# If enabled, scheduler starts the deployements only for updated machines.
# requires_agent_update = True

[database]
dbdriver = mysql
dbhost = localhost
dbport = 3306
dbname = msc
dbuser = mmc
dbpasswd = mmc
# dbdebug = ERROR
# dbpoolrecycle = 60
# dbpooltimeout = 30
# SSL support
# dbsslenable = 0
# dbsslca =
# dbsslcert =
# dbsslkey =

[daemon]
# pidfile = /var/run/pulse2
# user = root
# group = root
# umask = 0077
# Example of non-root execution settings:
# user = mmc
# group = mmc
# umask = 0007
# setrlimit option allows to set process system resources usage. Syntax is:
# setrlimit = limit1 soft1 hard1 limit2 soft2 hard2 ...
# For example:
# setrlimit = RLIMIT_NOFILE 2048 2048 RLIMIT_CORE 0 0
# setrlimit =

[mmc_agent]
# We sometimes need to talk to our referent agent
# here are some key to speak with it
host = 127.0.0.1
port = 7080
username = mmc
password = s3cr3t
# enablessl = True
# verifypeer = False
# cacert = /etc/mmc/pulse2/scheduler/keys/cacert.pem
# localcert = /etc/mmc/pulse2/scheduler/keys/privkey.pem

# Our launchers
[launcher_01]
host=127.0.0.1
port=8001
username = username
password = password
enablessl = True
slots = 20
# networks near the launcher which can be compared with the IP addresses of machines
# for pre-detecting a preferred launcher.
# preferred_network =

[loggers]
keys=root

[handlers]
keys=hand01

[formatters]
keys=form01

[logger_root]
level=NOTSET
handlers=hand01

[handler_hand01]
class=handlers.TimedRotatingFileHandler
level=INFO
formatter=form01
args=("/var/log/mmc/pulse2-scheduler.log", 'midnight', 1, 7)

[formatter_form01]
format=%(asctime)s %(levelname)s %(message)s
